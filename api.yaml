swagger: "2.0"
info: 
  title: Fintech Blog
  description: Comprehensive api documentation of fintech blog by Design Tek Empire
  version: 1.0.1
  contact:
    email: ernestez12@gmail.com
  license: 
    name: "Apache 2.0"
    url: http://apache.org
servers: 
  -locaclurl: "http://localhost:3000"
  Local-description: This is my local server
  -liveurl: http://fintechblog.com
  Live-description: This is the company website

schemes: [http, https]

# API ENDPOINTS

paths:
  /secure/register:
     post:
         summary: Create a new User 
         description: This endpoint will create a new user and save to database
         produces:
           - application/json
         consumes:
           - application/json
         parameters:
           - in: body 
             name: creating a user
             schema:
               type: object
               properties:
                  username: 
                    type: string
                    required: true
                  email:
                    type: string
                  password: 
                    type: string
         responses:
            201:
              description: Success
            401:
              description: Unauthrized Action
            422:
              description: Action Not Allowed
            500:
              description: Internal Server Error
  
  /secure/login:
     post:
         summary: Login a registered user 
         description: Only fully registered user can login through this route (Username Accepts Both Email and Username)
         produces:
           - application/json
         consumes:
           - application/json
         parameters:
           - in: body 
             name: Login (username or Email)
             schema:
               type: object
               properties:
                  username: 
                    type: string
                    required: true
                  password: 
                    type: string
                   
         responses:
            200:
              description: Logged in successfullly
            401:
              description: Provide Missing details
            403: 
              description: Unauthorized Action
            500:
              description: Internal Server Error
       
  /secure/forgotpassword:
     post:
         summary: Forgot Password 
         description: Registered users can enter their email and receive OTP from their email
         produces:
           - application/json
         consumes:
           - application/json
         parameters:
           - in: body 
             name: Enter email
             schema:
               type: object
               properties:
                  email: 
                    type: string
                    required: true     
         responses:
            200:
              description: successfullly Sent you OTP
            422:
              description: User Error or Server Error
                
  /secure/verifyotp:
     post:
         summary: Verify OTP 
         description: OTP received from user's email can be verified in this route, userId and the otp will be provided in the body before this verification process will be successfull
         produces:
           - application/json
         consumes:
           - application/json
         parameters:
           - in: body 
             name: Enter OTP
             schema:
               type: object
               properties:
                  userId: 
                    type: string
                    required: true     
                  otp: 
                    type: string
                    required: true     
         responses:
            201:
              description: successfull
            422:
              description: User Error or Server Error

  /secure/resetpassword/{id}:
     put:
         summary: Reset Password
         description: Here you'd be able to create new password after you've verified your OTP, password and password2 must match for the action to succeed, also password length must be morethan 6 characters
         produces:
           - application/json
         consumes:
           - application/json
         parameters:
           - name: id
             in: path
             schema:
               type: integer
           - in: body
             name: New Password
             schema:
               type: string
               properties: 
                 password:
                   type: string 
                 password2:
                   type: string 
         responses:
            201:
              description: Success
            403:
              description: Unauthorized Action
            404:
              description: User not found
            422:
              description: User or Server Error
              
  /secure/logout:
       get:
         summary: Logout a user and Kill a session 
         description: This endpoint kills a live session and logs a user out completely        
         responses:
            200:
              description: Logged out successfullly
            500:
              description: Internal Server Error
  
# Users Route
  /users/:
     get:
         summary: Get array of all Users
         description: Admins can see a list of all users of the application
         produces:
           application/json
         responses:
            200:
              description: Success
            403:
              description: Only admins can see this
            204:
              description: No posts found
            500:
              description: Internal Server error
  /users/{id}:
     get:
         summary: Get one single User
         description: Returns a user with a specified Id
         parameters:
           - name: id
             in: path
             schema:
               type: integer
         responses:
            200:
              description: Success
            403:
              description: Only admins can see this
            204:
              description: No posts found
            500:
              description: Internal Server error
  /users/edit/{id}:
     put:
         summary: Edit User Profile
         description: Admins and the given user can edit.
         consumes:
             - multipart/form-data
         produces:
            - application/json
         parameters:
           - name: id
             in: path
             schema:
               type: integer
           - in: formData
             name: image
             type: file
             description: Change profile picture
           - in: formData
             name: username
             type: string
             description: Username
           - in: formData
             name: firstname
             type: string
             description: First Name
           - in: formData
             name: lastname
             type: string
             description: Last Name
           - in: formData
             name: email
             type: string
             description: Email
           - in: formData
             name: password
             type: string
             description: Password
         responses:
            201:
              description: Success
            403:
              description: You're not authenticated
            500:
              description: Internal Server Error
  /users/delete/{id}:
     delete:
         summary: Delete A user
         description: Admins and the given user can delete.
         parameters:
           - name: id
             in: path
             schema:
               type: integer
         responses:
            200:
              description: Success
            403:
              description: You're not authenticated
            500:
              description: Internal Server Error
  /categories/:
     get:
         summary: Return All Categories
         description: This returns all the created categories from the database
         produces:
           - application/json
         responses:
            200:
              description: Success
            401:
              description: Unauthrized Action
            422:
              description: Action Not Allowed
            500:
              description: Internal Server Error
  
  /categories/create:
     post:
         summary: Create a new category
         description: Endpoint takes a category name as string and create a new category account in database
         produces:
           - application/json
         consumes:
           - application/json
         parameters:
           - in: body
             name: creating a user
             schema:
               type: object
               properties: 
                 title:
                   type: string 
         responses:
            201:
              description: Success
            403:
              description: You're not authenticated
            422:
              description: Category Already Exists
            500:
              description: Internal Server Error
  
  /categories/{id}:
     get:
         summary: Get One category by its Id
         description: This returns a category specified by its id in parameters
         produces:
           - application/json
         parameters:
           - name: id
             in: path
             schema:
               type: integer
         responses:
            200:
              description: Success
            403:
              description: You're not authenticated
            422:
              description: Category Already Exists
            500:
              description: Internal Server Error
  
  /categories/edit/{id}:
     put:
         summary: Edit a category specified by it id
         description: This endpoint edits any category as specified by its id in the params
         produces:
           - application/json
         consumes:
           - application/json
         parameters:
           - name: id
             in: path
             schema:
               type: integer
           - in: body
             name: Title
             schema:
               type: string
               properties: 
                 title:
                   type: string 
         responses:
            201:
              description: Success
            403:
              description: You're not authenticated
            422:
              description: Category Already Exists
            500:
              description: Internal Server Error
  
  /categories/delete/{id}:
     delete:
         summary: Delete a category specified by it id
         description: This endpoint deletes any category as specified by its id in the params
         parameters:
           - name: id
             in: path
             schema:
               type: integer
         responses:
            200:
              description: Success
            403:
              description: You're not authenticated
            422:
              description: Category Already Exists
            500:
              description: Internal Server Error
 
  /posts/create:
      post:
          summary: Create Post
          consumes:
            - multipart/form-data
          parameters:
            - in: formData
              name: image
              type: file
              description: file upload
            - in: formData
              name: title
              type: string
              required: true
              description: Enter Post Title
            - in: formData
              name: category
              type: string
              enum: ["Educational", "Schooling", "Banking", "Finances"]
            - in: formData
              name: desc
              type: string
          responses:
              200:
                description: Success
              403:
                description: You're not authenticated
              500:
                description: Internal Server Error
         
  /posts/approve/{id}:
     put:
         summary: Approve a Post
         description: Admins and editors can approve a post from this route
         parameters:
           - name: id
             in: path
             schema:
               type: integer
           - in: formData
             name: status 
             type: string
             enum: ["Approved", "Declined", "Pending"]
         responses:
            201:
              description: Success
            403:
              description: You're not authenticated
            500:
              description: Internal Server Error
  
  /posts/edit/{id}:
     put:
         summary: Edit  Post
         description: Admins and post authors can edit post.
         consumes:
             - multipart/form-data
         produces:
            - application/json
         parameters:
           - name: id
             in: path
             schema:
               type: integer
           - in: formData
             name: title
             type: string
             description: Enter new title
           - in: formData
             name: category
             type: string
             enum: ["Educational", "Schooling", "Banking", "Finances"]
           - in: formData
             name: desc
             type: string
             description: update content
             format: textarea
         responses:
            201:
              description: Success
            403:
              description: You're not authenticated
            500:
              description: Internal Server Error

  /posts/delete/{id}:
     delete:
         summary: Delete a post specified by it id
         description: Approaved Posts can only be deleted by Admins and Editors, If an Editor deletes, reason for deleting the post will be provided and the final deletion of the post will await admin approval else the deleted post will be trashed into recycle bin. While unapproved posts can be deleted by anyone including the post author.
         parameters:
           - name: id
             in: path
             schema:
               type: integer
           - in: formData
             name: deleteReason
             type: string
             description: Enter reason for deleting the post
         responses:
            200:
              description: Success
            403:
              description: You're not authenticated
            500:
              description: Internal Server Error
 
  /posts/restore/{id}:
     put:
         summary: Restore a deleted post specified by it id
         description: Admin reserves the privilege to restore a post previously deleted by an Editor
         parameters:
           - name: id
             in: path
             schema:
               type: integer
           - in: formData
             name: restoreReason
             type: string
             description: Enter reason for restoring the post
         responses:
            200:
              description: Success
            403:
              description: You're not authenticated
            500:
              description: Internal Server Error
 
  /posts/:
     get:
         summary: Get all Posts & Query Posts by author or categories
         description: Query the database for posts based on category or the author.
         parameters:
         - in: query
           name: category 
           type: string
           enum: ["Banking", "Finances", "Educational",]
         - in: query
           name: author 
           type: string
         responses:
            200:
              description: Success
              schema:
               type: array
               items: 
                 type: object
            204:
              description: No posts found
            500:
              description: Internal server Error
# Get A single post
  /posts/user/{userId}:
     get:
         summary: Get a single User All Posts
         description: Return a single post from the database
         parameters:
           - name: userId
             in: path
             schema:
               type: integer
         responses:
            200:
              description: Success
            204:
              description: No posts found
            500:
              description: Internal Server error
  /posts/{slug}:
     get:
         summary: Get a single Post specified by id
         description: Return a single post from the database
         parameters:
           - name: slug
             in: path
             schema:
               type: string
         responses:
            200:
              description: Success
            204:
              description: No posts found
            500:
              description: Internal Server error
 
  /posts/like:
     post:
         summary: Like or Dislike a Post
         description: This endpoint takes postId in the req body and controls likes and disliking of a post, it stores the id's of users who likes the post in an array.
         consumes:
           application/json
         parameters:
          - in: body
            name: Like a post
            schema:
               type: object
               properties: 
                 postId: 
                   type: string
         responses:
             200:
               description: Success
  # Bookmark a Post
  /posts/bookmark:
     post:
         summary: Bookmark a post
         description: This endpoint allows you to bookmark a post for later reading, it takes the postId in the body.
         consumes:
           application/json
         parameters:
          - in: body
            name: Bookmark
            schema:
               type: object
               properties: 
                 postId: 
                   type: string
         responses:
             200:
               description: Success
             500:
               description: Internal Server Error

# Return a single User's all bookmarked posts
  /posts/bookmark/{userId}:
    get:
     summary: Get all bookmarked posts of a particular user
     description: This endpoint returns all all bookmarked posts of a particular user
     produces:
           - application/json
     consumes:
           - application/json
     parameters:
           - name: userId
             in: path
             schema:
               type: integer
     responses:
          200:
            description: Success
          204:
            description: "No Bookmark Found"
          403:
             description: You're not authenticated
          500:
             description: Internal Server Error

# Handle Comment Routes
  /comments/create:
    post:
     summary: Drop a Comment
     description: Both Logged in and Non Logged in user can drop a comment, a non logged in user will have to provide additional details of name and email particulars before they can submit a comment.
     produces:
           - application/json
     consumes:
           - application/json
     parameters:
           - name: postId
             in: path
             schema:
               type: integer
           - in: body
             name: comment
             schema:
               type: string
               properties: 
                 full_name:
                   type: string
                 email:
                   type: string
                 comment:
                   type: string
                 
     responses:
          201:
            description: Success
          403:
             description: You're not authenticated
          500:
             description: Internal Server Error

# Edit Comment
  /comments/edit/{id}:
    put:
     summary: Edit Comment
     description: Admins/Editor and post authors can edit post.
     produces:
           - application/json
     consumes:
           - application/json
     parameters:
           - name: id
             in: path
             schema:
               type: integer
           - in: body
             name: comment
             schema:
               type: string
               properties: 
                 comment:
                   type: string 
     responses:
          201:
            description: Success
          403:
             description: You're not authenticated
          500:
             description: Internal Server Error
  # Delete Comment
  /comments/delete/{id}:
    delete:
     summary: Delete Comment
     description: Admins/Editor and comment authors can delete post.
     produces:
           - application/json
     consumes:
           - application/json
     parameters:
           - name: id
             in: path
             schema:
               type: integer
     responses:
          200:
            description: Success
          403:
             description: You're not authenticated
          500:
             description: Internal Server Error

  /comments/all/{postId}:
    get:
     summary: All comments from a single Post
     description: This endpoint returns all comments that was made on a singular post noted by postId
     produces:
           - application/json
     consumes:
           - application/json
     parameters:
           - name: postId
             in: path
             schema:
               type: integer
     responses:
          200:
            description: Success
          204:
             description: No post found
          500:
             description: Internal Server Error

# Trade Signal and Trade Indicators
  /trades/create:
     post:
       summary: Create Trade Signal
       description: This endpoint allows Admins or Partners to Create Trade signals.
       consumes:
         - application/json
       produces:
         - application/json
       parameters:
           - in: body 
             name: Create Signal
             schema:
               type: object
               properties:
                  symbol: 
                    type: string        
                  stopLoss: 
                    type: integer     
                  takeProfit: 
                    type: integer     
                  entryTime: 
                    type: string     
                  endTime: 
                    type: string     
       responses:
          201:
            description: Success
          204:
             description: No post found
          403:
            description: Partner Access required
          500:
             description: Internal Server Error

  /trades/edit/{id}:
     put:
       summary: Edit Trade Signal
       description: This endpoint allows the Partner that created the signal to edit.
       consumes:
         - application/json
       produces:
         - application/json
       parameters:
           - name: id
             in: path
             schema:
               type: integer
           - in: body 
             name: Edit Signal
             schema:
               type: object
               properties:
                  symbol: 
                    type: string        
                  stopLoss: 
                    type: integer     
                  takeProfit: 
                    type: integer     
                  entryTime: 
                    type: string     
                  endTime: 
                    type: string     
       responses:
          201:
            description: Success
          204:
             description: No post found
          403:
            description: Partner Access required
          500:
             description: Internal Server Error

  /trades/delete/{id}:
     delete:
       summary: Delete Trade Signal
       description: This endpoint allows the Partner or an Admin that created the signal to Delete.
       parameters:
           - name: id
             in: path
             schema:
               type: integer
       responses:
          201:
            description: Success
          204:
             description: No post found
          403:
            description: Partner Access required
          500:
             description: Internal Server Error

  /trades/all:
     get:
       summary: Get All trade Signals
       description: This endpoint returns All trade Signals and its open to both logged in and  non-logged in users
       produces:
         - application/json
       responses:
          200:
            description: Success
          204:
             description: No Signal found
          403:
            description: Partner Access required
          500:
             description: Internal Server Error


